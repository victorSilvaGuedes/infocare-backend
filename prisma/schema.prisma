generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Enums ---

enum StatusAssociacao {
  pendente
  aprovada
  rejeitada
}

enum StatusInternacao {
  ATIVA
  ALTA
}

enum TipoProfissional {
  MEDICO
  ENFERMEIRO
  OUTRO
}

// --- Modelos ---

model Paciente {
  id             Int      @id @default(autoincrement()) @map("id_paciente")
  nome           String   @db.VarChar(255)
  cpf            String   @unique @db.VarChar(14)
  telefone       String?  @db.VarChar(20)
  dataNascimento DateTime @map("data_nascimento") @db.Date
  tipoSanguineo  String?  @map("tipo_sanguineo") @db.VarChar(5)

  internacoes Internacao[]

  @@map("Pacientes")
}

// (MODELO REVERTIDO)
model Familiar {
  // ID volta a ser Int (simples)
  id       Int     @id @default(autoincrement()) @map("id_familiar")
  nome     String  @db.VarChar(255)
  cpf      String  @unique @db.VarChar(14)
  telefone String? @db.VarChar(20)
  // Campos de login VOLTAM para o modelo
  email    String  @unique @db.VarChar(255)
  senha    String  @db.VarChar(255) // Vamos hashear isso antes de salvar

  internacoesResponsaveis Internacao[]
  associacoesSolicitadas  Associacao[]

  @@map("Familiares")
}

// (MODELO REVERTIDO)
model ProfissionalSaude {
  // ID volta a ser Int (simples)
  id            Int     @id @default(autoincrement()) @map("id_profissional")
  nome          String  @db.VarChar(255)
  cpf           String  @unique @db.VarChar(14)
  telefone      String? @db.VarChar(20)
  // Campos de login VOLTAM para o modelo
  email         String  @unique @db.VarChar(255)
  senha         String  @db.VarChar(255) // Vamos hashear isso
  
  crm           String? @unique @db.VarChar(20)
  coren         String? @unique @db.VarChar(20)
  especialidade String? @db.VarChar(100)
  tipo          TipoProfissional @default(OUTRO) 

  evolucoes Evolucao[]

  @@map("ProfissionaisSaude")
}

model Internacao {
  id          Int       @id @default(autoincrement()) @map("id_internacao")
  idPaciente  Int       @map("id_paciente")
  // idFamiliar volta a ser Int? (opcional)
  idFamiliar  Int?      @map("id_familiar") 
  dataInicio  DateTime  @default(now()) @map("data_inicio") @db.Timestamp()
  dataAlta    DateTime? @map("data_alta") @db.Timestamp()
  diagnostico String?   @db.Text
  observacoes String?   @db.Text
  status      StatusInternacao @default(ATIVA)

  // Relações com onDelete (mantemos isso)
  paciente Paciente @relation(fields: [idPaciente], references: [id], onDelete: Cascade)
  // Relação com Familiar (agora aponta para o ID Int)
  familiar Familiar? @relation(fields: [idFamiliar], references: [id], onDelete: SetNull)

  evolucoes   Evolucao[]
  associacoes Associacao[]

  @@map("Internacoes")
}

model Evolucao {
  id             Int      @id @default(autoincrement()) @map("id_evolucao")
  idInternacao   Int      @map("id_internacao")
  // idProfissional volta a ser Int? (opcional)
  idProfissional Int?     @map("id_profissional")
  dataEvolucao   DateTime @default(now()) @map("data_evolucao") @db.Date
  horario        DateTime @default(now()) @db.Time()
  descricao      String   @db.Text

  internacao Internacao @relation(fields: [idInternacao], references: [id], onDelete: Cascade)
  // Relação com Profissional (agora aponta para o ID Int)
  profissional ProfissionalSaude? @relation(fields: [idProfissional], references: [id], onDelete: SetNull)

  @@map("Evolucoes")
}

model Associacao {
  id              Int              @id @default(autoincrement()) @map("id_associacao")
  // idFamiliar volta a ser Int
  idFamiliar      Int              @map("id_familiar")
  idInternacao    Int              @map("id_internacao")
  dataSolicitacao DateTime         @default(now()) @map("data_solicitacao") @db.Timestamp()
  status          StatusAssociacao @default(pendente)

  // Relações (apontando para IDs Int)
  familiar Familiar @relation(fields: [idFamiliar], references: [id], onDelete: Cascade)
  internacao Internacao @relation(fields: [idInternacao], references: [id], onDelete: Cascade)

  @@map("Associacoes")
}