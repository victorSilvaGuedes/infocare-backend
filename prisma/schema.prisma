// Salve este arquivo como: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- Enums ---

// Enum para o status do pedido de associação do Familiar
enum StatusAssociacao {
  pendente
  aprovada
  rejeitada
}

// Enum para o status da Internação (o que você perguntou)
enum StatusInternacao {
  ATIVA
  ALTA
}

// Enum para os tipos de profissionais
enum TipoProfissional {
  MEDICO
  ENFERMEIRO
  OUTRO
}

// --- Modelos ---

model Paciente {
  id             Int      @id @default(autoincrement()) @map("id_paciente")
  nome           String   @db.VarChar(255)
  cpf            String   @unique @db.VarChar(14)
  telefone       String?  @db.VarChar(20)
  dataNascimento DateTime @map("data_nascimento") @db.Date
  tipoSanguineo  String?  @map("tipo_sanguineo") @db.VarChar(5)

  // Relação: Um paciente pode ter várias internações
  internacoes Internacao[]

  @@map("Pacientes")
}

model Familiar {
  id       Int     @id @default(autoincrement()) @map("id_familiar")
  nome     String  @db.VarChar(255)
  cpf      String  @unique @db.VarChar(14)
  telefone String? @db.VarChar(20)
  email    String  @unique @db.VarChar(255)
  senha    String  @db.VarChar(255)

  // Relações:
  internacoesResponsaveis Internacao[] // Internações onde ele é o responsável
  associacoesSolicitadas  Associacao[] // Pedidos de associação que ele fez

  @@map("Familiares")
}

model ProfissionalSaude {
  id            Int     @id @default(autoincrement()) @map("id_profissional")
  nome          String  @db.VarChar(255)
  cpf           String  @unique @db.VarChar(14)
  telefone      String? @db.VarChar(20)
  email         String  @unique @db.VarChar(255)
  senha         String  @db.VarChar(255)
  
  crm           String? @unique @db.VarChar(20)
  coren         String? @unique @db.VarChar(20)
  especialidade String? @db.VarChar(100)
  tipo          TipoProfissional @default(OUTRO) 

  // Relações:
  internacoesResponsaveis Internacao[] @relation("ProfissionalResponsavel") // (NOVO)
  evolucoes Evolucao[] // Evoluções que este profissional escreveu

  @@map("ProfissionaisSaude")
}

model Internacao {
  id          Int       @id @default(autoincrement()) @map("id_internacao")
  idPaciente  Int       @map("id_paciente")
  idFamiliar  Int?      @map("id_familiar") // Familiar principal (definido na entrada)
  
  // (NOVO) Profissional responsável pela internação
  idProfissionalResponsavel Int? @map("id_profissional_responsavel")

  dataInicio  DateTime  @default(now()) @map("data_inicio") @db.Timestamp()
  dataAlta    DateTime? @map("data_alta") @db.Timestamp() // Data de encerramento
  diagnostico String?   @db.Text
  observacoes String?   @db.Text
  status      StatusInternacao @default(ATIVA) // ATIVA ou ALTA

  // (NOVOS) Campos de localização
  quarto      String?   @db.VarChar(50)
  leito       String?   @db.VarChar(50)

  // Relações
  paciente Paciente @relation(fields: [idPaciente], references: [id], onDelete: Cascade)
  familiar Familiar? @relation(fields: [idFamiliar], references: [id], onDelete: SetNull)
  
  // (NOVA) Relação com o profissional responsável
  profissionalResponsavel ProfissionalSaude? @relation("ProfissionalResponsavel", fields: [idProfissionalResponsavel], references: [id], onDelete: SetNull)

  evolucoes   Evolucao[]   // Lista de evoluções
  associacoes Associacao[] // Lista de familiares associados

  @@map("Internacoes")
}

model Evolucao {
  id             Int      @id @default(autoincrement()) @map("id_evolucao")
  idInternacao   Int      @map("id_internacao")
  idProfissional Int?     @map("id_profissional") // Quem escreveu a evolução
  dataEvolucao   DateTime @default(now()) @map("data_evolucao") @db.Date
  horario        DateTime @default(now()) @db.Time()
  descricao      String   @db.Text

  // Relações
  internacao Internacao @relation(fields: [idInternacao], references: [id], onDelete: Cascade)
  profissional ProfissionalSaude? @relation(fields: [idProfissional], references: [id], onDelete: SetNull)

  @@map("Evolucoes")
}

model Associacao {
  id              Int              @id @default(autoincrement()) @map("id_associacao")
  idFamiliar      Int              @map("id_familiar") // O familiar que está a pedir
  idInternacao    Int              @map("id_internacao") // A internação que ele quer ver
  dataSolicitacao DateTime         @default(now()) @map("data_solicitacao") @db.Timestamp()
  status          StatusAssociacao @default(pendente)

  // Relações
  familiar Familiar @relation(fields: [idFamiliar], references: [id], onDelete: Cascade)
  internacao Internacao @relation(fields: [idInternacao], references: [id], onDelete: Cascade)

  @@map("Associacoes")
}